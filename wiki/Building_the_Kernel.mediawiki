---
title: Building the Kernel
---

<div style="padding:0; margin:0 0 0.5em 0; border-style:solid; border-width:medium">
{| width="100%" align="center" style="text-align:left; "
| style="padding-left:5px;" | '''IMPORTANT:''' The content of this page is outdated. Please '''[[User:Alex_Ivanov/Building_the_Kernel|check draft]]''' version instead.
|}</div>

If you are only interested in using Linux/PARISC then please see the [http://www.parisc-linux.org/software/index.html software] information web page.

We no longer advise using the [http://www.parisc-linux.org/software/index.html#xcs pre-built cross compiler] to build a parisc kernel on an x86 linux host. Native compiler/linker tools are better maintained. The old mini-howto describes how to [http://www.parisc-linux.org/kernel/nfsroot.html cross-build kernels] for Net Boot. Please only bother with this if you have a very slow parisc machine and very fast x86 machine.

= Prerequisites For Building Kernels =
* Internet connection
* hppa-debian host properly configured so apt-get and ftp work
* http://ftp.debian-ports.org/debian and http://ftp.parisc-linux.org/debian-ports/debian apt sources

= How To Build a Kernel =
Here are details developers care about in order to '''modify, build, test''' parisc-linux kernels. Note that just because a kernel option can be select, does NOT mean it works. Trial and error is usually the only sure way to find out. Reports of such adventures are always welcome on the parisc-linux [mailto:linux-parisc@vger.kernel.org mailing list].
<ol>
<li>'''Install tools'''
<pre>
apt-get install kernel-package gcc binutils lib6-dev
</pre></li>
<li>'''Obtain kernel source''': Stable kernel sources are available via <tt>apt-get install linux-source-XX</tt> (where XX is something like "2.4.25-32" or "2.6.6-32").</li>
<li>'''Configure Kernel Options'''
<pre>
cd /usr/src/linux-2.6
# clone the nearest _config to start with
cp arch/parisc/configs/b180_config .config
# You can also "make config" or "make menuconfig" here
# to adjust the .config if kernel defaults don't suit you.
make oldconfig
</pre></li>
<li>'''Build Kernel Executables'''
<pre>
# current
make

# 2.4.x needs several steps instead:
#	make -j2 dep && make vmlinux && make modules
 
# must be root user
make modules_install
</pre></li>
<li>'''Installing the kernel'''
The resulting kernel image is <tt>/usr/src/linux-2.6/vmlinux</tt>. Normally, x86-linux will save the existing vmlinux and install the new kernel with <tt>make install</tt>. The "dpkg -i" steps above do about the same thing. Here is one way to do it manually:
<pre>
cd /boot
mv vmlinux vmlinux.old
mv System.map System.map.old
cd /usr/src/linux-2.6
cp System.map vmlinux /boot/
sync
reboot
</pre>
''NOTE: One does not need to run palo when replacing an existing kernel.''

Another way is to rename <tt>vmlinux</tt> with revision info, reboot, interrupt autoboot and specify interactive boot, specify the new kernel via palo, and finally once the new kernel is booted, modify <tt>/etc/palo.conf</tt> to match (and run <tt>palo</tt> again). Start with something like:
<pre>
cp vmlinux /boot/vmlinux-2.6.6-pa1
cp System.map /boot/System.map-2.6.6-pa1
cp .config /boot/config-2.6.6-pa1
sync
reboot
...
</pre></li>
</ol>